CMAKE_MINIMUM_REQUIRED(VERSION 2.8.1)
CMAKE_POLICY(VERSION 2.8.1)

SET(PROJECT_NAME tests)

PROJECT(${PROJECT_NAME})

SET(TEST_DIR ${ROOT_DIR}/${PROJECT_NAME})
SET(TEST_FRAMEWORK_INCLUDE_DIRS ${TEST_DIR})

MESSAGE(STATUS "Test code directory: " ${TEST_DIR})

FILE (GLOB HEADERS ${TEST_DIR}/*/*.hpp)
FILE (GLOB SOURCES ${TEST_DIR}/testcases/*.cpp ${TEST_DIR}/testcases/*/*.cpp ${TEST_DIR}/helpers/*.cpp ${TEST_DIR}/doubles/*.cpp)


IF(NOT DEFINED TURTLE_ROOT)
    SET(TURTLE_ROOT $ENV{TURTLE_ROOT})
ENDIF()

IF(NOT DEFINED TURTLE_ROOT)
  MESSAGE(FATAL_ERROR "Could not find TURTLE_ROOT."
  "You need to set TURTLE_ROOT environment variable to path where Turtle Mock is installed. "
  "Turtle Mock can be downloaded for free from http://turtle.sourceforge.net/") 
ENDIF()
MESSAGE(STATUS "Found Turtle Mock in: " ${TURTLE_ROOT})

INCLUDE_DIRECTORIES(${TURTLE_ROOT})
INCLUDE_DIRECTORIES(${TEST_FRAMEWORK_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${LIBRARIES_INCLUDE_DIRS})

ADD_DEFINITIONS(-DTEST_FILES_DIRECTORY="${TEST_DIR}/files/")
ADD_DEFINITIONS(-DTEST_FILES_DIRECTORY_STRING=std::string\("${TEST_DIR}/files/"\))

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCES} ${HEADERS})

SET(POTRACE_EXECUTABLE $<TARGET_FILE:potrace>)
SET(MKBITMAP_EXECUTABLE $<TARGET_FILE:mkbitmap>)
SET(PATH_TO_TEST_BINARY $<TARGET_FILE:${PROJECT_NAME}>)

#GET_TARGET_PROPERTY(POTRACE_EXECUTABLE potrace LOCATION)
#GET_TARGET_PROPERTY(MKBITMAP_EXECUTABLE mkbitmap LOCATION)
#GET_TARGET_PROPERTY(PATH_TO_TEST_BINARY ${PROJECT_NAME} LOCATION)
ADD_DEFINITIONS(-DDEFAULT_POTRACE_EXECUTABLE_NAME="${POTRACE_EXECUTABLE}")
ADD_DEFINITIONS(-DDEFAULT_POTRACE_EXECUTABLE_NAME_STRING=std::string\("${POTRACE_EXECUTABLE}"\))
ADD_DEFINITIONS(-DDEFAULT_MKBITMAP_EXECUTABLE_NAME="${MKBITMAP_EXECUTABLE}")
ADD_DEFINITIONS(-DDEFAULT_MKBITMAP_EXECUTABLE_NAME_STRING=std::string\("${MKBITMAP_EXECUTABLE}"\))
ADD_DEFINITIONS(-DMOCK_THREAD_SAFE)

ADD_DEFINITIONS(-DPATH_TO_TEST_BINARY="${PATH_TO_TEST_BINARY}")

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${INTERNAL_LIBRARIES} ${SEMI_INTERNAL_LIBRARIES} ${EXTERNAL_LIBRARIES})

MESSAGE(STATUS "Linking test build with:  ${INTERNAL_LIBRARIES} ${SEMI_INTERNAL_LIBRARIES} ${EXTERNAL_LIBRARIES}")
